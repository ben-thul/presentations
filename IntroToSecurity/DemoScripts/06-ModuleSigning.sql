-- let's say that cross-db chaining is not available.
-- what else can we do?

ALTER DATABASE WorldWideImporters SET DB_CHAINING OFF;
ALTER DATABASE ChainTest SET DB_CHAINING OFF;

USE WorldWideImporters;
GO
IF NOT EXISTS (SELECT * FROM sys.symmetric_keys AS sk WHERE name = '##MS_DatabaseMasterKey##')
    CREATE MASTER KEY ENCRYPTION BY PASSWORD = '$Hhhhhhhhhhhhhhhhhh'
CREATE CERTIFICATE [signingCert] 
    WITH SUBJECT = 'Certificate for code signing'

CREATE USER [signingUser] FROM CERTIFICATE [signingCert];
GRANT SELECT ON Application.Cities TO [signingUser];

DECLARE @password VARCHAR(40) = 'f00bar!23'
select name, 'create certificate ' + QUOTENAME(name) + ' from binary = ' 
    + CONVERT(VARCHAR(MAX), CERTENCODED(CERT_ID(name)), 1)
    + ' with private key ( binary = ' 
    + CONVERT(VARCHAR(MAX), CERTPRIVATEKEY(CERT_ID(name), @password), 1)
    + ', decryption by password = ''' + @password + ''')'
FROM sys.[certificates] AS [c]


USE ChainTest;
GO
-- nothing up my sleeve
EXECUTE AS LOGIN = 'OliverTwist';
GO
-- doesn't work because chaining doesn't work cross-db
EXECUTE dbo.usp_getCities 
GO
REVERT
GO

IF NOT EXISTS (SELECT * FROM sys.symmetric_keys AS sk WHERE name = '##MS_DatabaseMasterKey##')
    CREATE MASTER KEY ENCRYPTION BY PASSWORD = '$Hhhhhhhhhhhhhhhhhh'

-- copy/paste the 'CREATE CERTIFICATE' statement from the other database
-- to create it here

create certificate [signingCert] from binary = 0xwith private key ( binary = 0xdecryption by password = 'f00bar!23')
-- now that we have the same certificate in both locations,
-- we can use it to sign the procedure

ADD SIGNATURE TO dbo.usp_getCities BY CERTIFICATE [signingCert]

EXECUTE AS LOGIN = 'OliverTwist';
GO
-- now that the stored procedure is signed, this works
EXECUTE dbo.usp_getCities 
GO
REVERT
GO